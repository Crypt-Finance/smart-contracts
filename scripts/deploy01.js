// We require the Hardhat Runtime Environment explicitly here. This is optional 
// but useful for running the script in a standalone fashion through `node <script>`.
//
// When running the script with `hardhat run <script>` you'll find the Hardhat
// Runtime Environment's members available in the global scope.
const hre = require("hardhat");
require('dotenv').config();

const airdropRecipients = [
  0xebc146CC23b0742B603595f8bEA7dABcbF05840A,
  0x1440B55c5a3722e440eeAAE62fd02ff82Da78F59,
  0x2Bf5BC87AE8A378833738974B41d696288274443,
  0xD125D49F04702758aD50A64463576206DBdaC2d4,
  0x3859Fc2aBe68b16669658368bD6Aece648e7456a,
  0xebc81492aa41839a81815527054d41FD9Ce0918C,
  0x0afdaab23c3feab1441f078ad47ed70dfea4fdb6,
  0x3ea9DD246531cdb4586640F73f6f56037Af328F1,
  0x9774daC7C89E96b2BE9403AaA9B98dE62B835BbC,
  0x6a48ec1612221cfa07dae8c340f25520044aa2e0,
  0xd72225c033592b1447e3a19bf457b949d161740a,
  0x975474FF64739316c3a4e8E66c791Ce83ca02F38,
  0x4EA5eF1207DDEA0e4DE4D480fB1a6765C6edb291,
  0x99eE6D18708fe26192C943897F3d0d7C45b628d8,
  0xdde0874187a085ee9138793a1825dd2fd13a7d1c,
  0xD5eD0DC20Bafc45e9B7C18B310934DeF3cFdF723,
  0x0156a7a5f84449bccdf1c7fcbf52cad8200dc783,
  0x265401ced8af3e3261491238a86b61405ae3318d,
  0xd45d35bC22c19a9979184fC146108eaB0B6AD41c,
  0xB50d78b0C608119ad86cFCEEE2b649392A7E482F,
  0xc356b22f2f5f08f27AEE64E19eD49873edcA8799,
  0x5E1DDBF30651D056d744BA2124a1aB9183Cb74C9,
  0x170654e37b07F1B67aDb13b49fb65e57a05e8899,
  0x0381f313983B70B0e3CC07d3496146ce4BeC6EC3,
  0x9B921faD875b06183d3992A125026c89915D71F6,
  0xdc5a68faeaad2c56923d9a6859c0e922374ecfba,
  0xA07612c5760BDb5cd4544Aa5c7993E5583Bf6d52,
  0x85b452216B053cBB018D9c7C4195da51b600C28E,
  0xDAbc72dAc85692e0115257DB423648f0E4D23040,
  0x45cC2088e22FA1196d1fBFdbe3E539C76Dc0BF22,
  0x8bd0cc8bf9e15fe40cfc36c73c13d158d9930926,
  0xdb01820bd17cf207adbbb0532085191a3aee5e81,
  0x725C793F53d1022ca7E3Da103ab2bf932F6206CB,
  0x9c2E61B43bb14E484a04B6Dd6c26Cc59cc29FcC5,
  0x5918644832c9C9F4e53470B83E460195FFA0ef51,
  0x164Ef169ba1777af6fF0bb00e1B7f26f59B6eeE8,
  0xf816b48A6705C5487f1FBd7c7Ec10dC063568CEF,
  0x8C1eDaf53B86d4781F9ec1aAFf9E57F5813c54Fd,
  0x86E1Db5308c3A960D7755D6050bF8fBA3deA5261,
  0x45dAA4Eff1a56A21f557BD1690fBb7C1334226C6,
  0x54692cB1Cb4F48dB074B9fD691c2B44267194184,
  0x1D433a6b9e1D4c9371447115B34d92Cdb50F55CD,
  0x0f6f9b677b8e59f6a1a1ef714b85b2a33bbdb80c,
  0x495165D512a069E8797E9F2EAe7AdB24aE0C7141,
  0x930aF2f6D25AD776e7074583D8895E0B8a28bf2F,
  0xa380eeBFd319803558950e8f9de78BeeCAA7A4eF,
  0xCeBFe02B40a725AA473fe14E6e06629358F8fe42,
  0xB10Ea587f1EA41EFC16dC30700cc3707Fc17a356,
  0xFA6a58BbC582568727dc5C543c61c72eB1EA32DC,
  0xbda12563a964a731B306B1BfD947F6b30271Fe11,
  0x6A86e7A531474A0FA03e7b46d4b37CF74675c072,
  0x9bfa5263137001D9e1A39375977073aA30842273,
  0xe9c6f6D44C546CdD54231e673Ba8b612972cdD07,
  0x9e0a67f28d69b05b4146ef560ca0835831bd3991,
  0x37D16478f0A68E5c51531Bd3B68705B174806b6A,
  0xA4c661ED7ED369e18F4Cd04b372a3DD5E36C0252,
  0x0Aff6209ecc532BAE692E0b4923C379Cb2027f07,
  0x8805912814e8Cc825d0bfe275Fd25275aE0c50e6,
  0xb2B98907a0a6ABB7104213f43cAd58c5898De6e9,
  0xd194A7D01D2FeB6324f2171348F7EEC0D6265C0b,
  0xE8e5d2C181ee73458142792C2659cFe3ed10CB02,
  0x7C4d90411D9158eF1cFe9154c26707Dc43555A0a,
  0x75Ef2D0B1b560D4b9F47315B44F5BB62B071308C,
  0xccF0Ef9242f19788cb6f8758912638951D77d23b,
  0x75fb9799a8416e83a0996af01e77c35b2c5ddee4,
  0x1DC17Fe28787583D257c3494423e67149c411CEC,
  0xbdac1a96003a050b5eda0ea20c5c14e0eedcec94,
  0x305610E5f477355B83a08FE390CD7098fF881C24,
  0x3C325aDD076c6d49e71E504e2ffCe78c26fC143d,
  0x9860e85e31449e480e80b3780381dedd3866a360,
  0x55863A2F8B69Fd859c5db8134da343CB1fAe3B6a,
  0x50DfC957053F024F1B5F907010B739C93CbdeeA8,
  0x3729e8a809c096eC99aC9B1Abe5AB6A589B85072,
  0x4c46fde00e8760151a9afecd8fb5fcf893ddf41b,
  0xc5bd97236629957653C0abb32A5De02AA34530EC,
  0xFc40B3124C5b6368C553F6F44C164567E24841B3,
  0x02756510317a5DF169213fC2787D53D258F870Cd,
  0x8bC7cE84bbe45D65bE6B5d7be6D113Cae0480752,
  0xA4c661ED7ED369e18F4Cd04b372a3DD5E36C0252,
  0x3cd81b539d4E9b0e49106a9B0237aBb8B449Bf48,
  0x79751B632155eDB146521859541c4A45E24849e3,
  0x1152461584cefd2d713bfb167e23b32bb98b75bc,
  0xd70c2dbbbb1265bcb3423d1ef2dafa510201868c,
  0xe4cebb9ded1c1221d5c479b9c3264deba1b21ca6,
  0x09D7e4B39585932Df74a92e55d9609B04543958d,
  0xAE6D6F831170bb11E8B36BB992CfdFFA7D06559A,
  0x921eB6EF9D5C0319989307d7f3b7a41d6af402eb,
  0x1114DC2A9853b065FC61fe6AC16C9f789771b30D,
  0x1763eE6e2b18B0c09a804988a7577b582492632F,
  0xa43d7875f02c06c4e348fa6af21654aadee937ca,
  0x3cd81b539d4E9b0e49106a9B0237aBb8B449Bf48,
  0x426923E98e347158D5C471a9391edaEa95516473,
  0x5D2254a60340Be6276Ece9d77512D476f9bf7BAa,
  0x31634851e54c526c532D90BCFb6297bb57b86F2C,
  0x49790DC3B2d3b9C8A8dD88dd2C942b7689246e39,
  0x9231C3Ad10c90222a29F5256aa9dF3ef7312FA82,
  0x9E52F34c53fc4c73b0073465943F19843B3309c8,
  0x1889AC8E476D1b603fd649179AD3A179E2D317f9,
  0x519e556C76cd6985b6A13E718b07218c65C54dEa,
  0x3c22a806eC5Db037CA6517Ab9d1962A4D5868821,
  0x656F74A9FB878Ba17F75951907bC11B922e8667e,
  0xA121B36d66b50Eb1ea6f29734eDfe4B2C6380219,
  0x2b0F62dc57C7543E529c028A0E9A79F768E79d68,
  0x5e1c1D83bf06Fee7e97487173Bf7d4A15E8b72d4
]

async function main() {
  // Hardhat always runs the compile task when running scripts with its command
  // line interface.
  //
  // If this script is run directly using `node` you may want to call compile 
  // manually to make sure everything is compiled
  // await hre.run('compile');

  // Getting the Wallet
  //walletPrivateKey = new hre.ethers.Wallet(process.env.FUJI_PRIVATE_KEY);
  // TODO: Implement Wallet so I can transfer with Multisig or just wait until I can figure out Gnosis Safe.

  // Creating the Token
  const CoinToken = await hre.ethers.getContractFactory("CoinToken");
  const coinToken = await CoinToken.deploy("Crypt","RIP","18","10000000",process.env.FUJI_MULTISIG); 
  await coinToken.deployed();
  console.log("Token deployed to:", coinToken.address);


  const Airdrop = await hre.ethers.getContractFactory("Airdrop");
  const airdrop = await Airdrop.deploy(coinToken.address,process.env.FUJI_MULTISIG,process.env.FUJI_MULTISIG)
  await airdrop.deployed();
  console.log("Airdrop deployed to:", airdrop.address);
  
  // Transferring 500,000 RIP to the Airdrop address
  //coinToken.transfer(airdrop.address,500000);

  // Whitelisting all the Airdrop recipients before activating the Airdrop
  airdrop.whitelistAddresses(airdropRecipients, 1000);


}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });
